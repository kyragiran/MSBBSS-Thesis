---
title: "Simulation in Futures"
format: html
---

# Load required packages

```{r}
library(dplyr)
library(magrittr)
library(purrr)
library(furrr)
library(MASS)
library(mice)
library(torch)
library(tibble)
library(gnn)
```

# Time logging
```{r}
st <- Sys.time()
```

# Simulation parameters
```{r}
# Fixed over simulations
p <- 49 # number of predictors
n <- 500 # number of observations
nsim <- 100 # number of simulations
rho <- 0.5 # correlation between the predictors

set.seed(123) # reproducibility of the block

# create missing data patterns
miss.patterns <- replicate(15, sample(c(0, 1), 50, replace = TRUE)) %>% t() 
```

# Generate complete data
```{r datagen, cache=TRUE}
# Create a covariance matrix
sigma <- matrix(rho, nrow = 49, ncol = 49)
diag(sigma) <- 1 # correct the diagonal to 1

# Generate multivariate normal predictors
mu <- rep(0, 49) # vector of predictor means
simdata <- replicate(n = nsim, 
            expr = mvtnorm::rmvnorm(n = n, 
                                    mean = mu, 
                                    sigma = sigma) %>% 
              `colnames<-`(paste("V", 1:49, sep = "")) %>% # name columns
              as_tibble() %>% # make into a tibble
              mutate(y = 0.2 * V1 + 0.2 * V2 + 0.2 * V3 + 0.2 * V4 + rnorm(n)), # add outcome y
            simplify = FALSE) # keep as list of generated sets
```

# Inspect the model parameters
For the first simulated set:
```{r}
simdata[[1]] %$% # for the first simulated set in simdata
  lm(y ~ V1 + V2 + V3 + V4) %>% # fit linear model
  summary() 
```

For all simulated sets:
```{r}
simdata %>% 
  map(~.x %$% # for every simulated set in simdata....
        lm(y ~ V1 + V2 + V3 + V4) %>% # fit linear model
        coefficients) %>% # extract coefficients
  Reduce("+", .) / length(simdata) # add all and divide by length (= average)
```

# Start multisession `future`
```{r}
future:::usedCores() # check number of cores
plan(multisession)
future:::usedCores() # check number of cores

```

# MCAR 
We take the `r nsim` datasets in the list `simdata` and generate missing data in each of them. We will use the `mice` package's function `ampute()` to generate the missing data. 



## MCAR 10% missing
```{r MCAR10, cache=TRUE}
mbased_MCAR_10 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .1, # Amputation step
             patterns = miss.patterns,
             mech = "MCAR") %>% .$amp %>% 
      mice(m = 1, # Imputation step 
           maxit = 1,
           method = "mean",
           print = F)
  }, .options = furrr_options(seed = 123))
```

### Evaluate MCAR 10% 
```{r}
# Evaluation function
evaluate_single <- function(x){
  sum <- summary(x)
  results <- sum$coefficients 
  results <- cbind(results, confint(x)) %>% as.data.frame()
  results$true <- c(0, .2, .2, .2, .2)
  results$cov <- results$`2.5 %` < results$true & results$true < results$`97.5 %`
  results$bias <- results$Estimate - results$true
  results$rmse <- sqrt(mean((predict(x) - x$model$y)^2))
  return(results)
}
```

```{r}
# just a single simulation evaluated, to check the function
mbased_MCAR_10[[1]] %>% 
  complete() %$% # for every completed data set....
  lm(y ~ V1 + V2 + V3 + V4) %>% 
  evaluate_single()

# all simulations combined
mbased_MCAR_10 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        complete() %$% # for every completed data set....
        lm(y ~ V1 + V2 + V3 + V4) %>% 
        evaluate_single()) %>%  # `term` as rownames
  Reduce("+", .) / nsim
```

## MCAR 25% missing
```{r MCAR25, cache=TRUE}
mbased_MCAR_25 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .25, # Amputation step
             patterns = miss.patterns,
             mech = "MCAR") %>% .$amp %>% 
      mice(m = 1, # Imputation step 
           maxit = 1,
           method = "mean",
           print = F)
  }, .options = furrr_options(seed = 123))
```

### Evaluate MCAR 25% 
```{r}
mbased_MCAR_25 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        complete() %$% # for every completed data set....
        lm(y ~ V1 + V2 + V3 + V4) %>% 
        evaluate_single()) %>%  # `term` as rownames
  Reduce("+", .) / nsim
```

## MCAR 50% missing
```{r MCAR50, cache=TRUE}
mbased_MCAR_50 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .5, # Amputation step
             patterns = miss.patterns,
             mech = "MCAR") %>% .$amp %>% 
      mice(m = 1, # Imputation step 
           maxit = 1,
           method = "mean",
           print = F)
  }, .options = furrr_options(seed = 123))
```

### Evaluate MCAR 50% 
```{r}
mbased_MCAR_50 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        complete() %$% # for every completed data set....
        lm(y ~ V1 + V2 + V3 + V4) %>% 
        evaluate_single()) %>%  # `term` as rownames
  Reduce("+", .) / nsim
```

# MAR 
We take the `r nsim` datasets in the list `simdata` and generate missing data in each of them. We will use the `mice` package's function `ampute()` to generate the missing data. 

## MAR 10% missing
```{r MAR10, cache=TRUE}
mbased_MAR_10 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .1, # Amputation step
             patterns = miss.patterns,
             mech = "MAR") %>% .$amp %>% 
      mice(m = 1, # Imputation step 
           maxit = 1,
           method = "mean",
           print = F)
  }, .options = furrr_options(seed = 123))
```

### Evaluate MAR 10% 
```{r}
mbased_MAR_10 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        complete() %$% # for every completed data set....
        lm(y ~ V1 + V2 + V3 + V4) %>% 
        evaluate_single()) %>%  # `term` as rownames
  Reduce("+", .) / nsim
```

## MAR 25% missing
```{r MAR25, cache=TRUE}
mbased_MAR_25 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .25, # Amputation step
             patterns = miss.patterns,
             mech = "MAR") %>% .$amp %>% 
      mice(m = 1, # Imputation step 
           maxit = 1,
           method = "mean",
           print = F)
  }, .options = furrr_options(seed = 123))
```

### Evaluate MAR 25% 
```{r}
mbased_MAR_25 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        complete() %$% # for every completed data set....
        lm(y ~ V1 + V2 + V3 + V4) %>% 
        evaluate_single()) %>%  # `term` as rownames
  Reduce("+", .) / nsim
```

## MAR 50% missing
```{r MAR50, cache=TRUE}
mbased_MAR_50 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .5, # Amputation step
             patterns = miss.patterns,
             mech = "MAR") %>% .$amp %>% 
      mice(m = 1, # Imputation step 
           maxit = 1,
           method = "mean",
           print = F)
  }, .options = furrr_options(seed = 123))
```

### Evaluate MAR 50% 
```{r}
mbased_MAR_50 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        complete() %$% # for every completed data set....
        lm(y ~ V1 + V2 + V3 + V4) %>% 
        evaluate_single()) %>%  # `term` as rownames
  Reduce("+", .) / nsim
```

# Runtime
```{r}
Sys.time() - st
```

