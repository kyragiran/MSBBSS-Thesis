---
title: "VAE Simulation in Futures"
format: html
---

# Load required packages

```{r}
library(dplyr)
library(magrittr)
library(purrr)
library(furrr)
library(MASS)
library(mice)
library(torch)
library(tibble)
library(gnn)

source("2_functions.R")
```

# Time logging
```{r}
st <- Sys.time()
```

## Simulation parameters
```{r}
# Fixed over simulations
p <- 49 # number of predictors
n <- 500 # number of observations
nsim <- 1000 # number of simulations
rho <- 0.5 # correlation between the predictors

set.seed(123) # reproducibility of the block

# True coefs used in evaluations of the VAE
true_coefs <- c("(Intercept)" = 0, V1 = 0.2, V2 = 0.2, V3 = 0.2, V4 = 0.2)

# create missing data patterns
miss.patterns <- replicate(15, sample(c(0, 1), 50, replace = TRUE)) %>% t() 
```

# Generate complete data
```{r datagen, cache=TRUE}
# Create a covariance matrix
sigma <- matrix(rho, nrow = 49, ncol = 49)
diag(sigma) <- 1 # correct the diagonal to 1

# Generate multivariate normal predictors
mu <- rep(0, 49) # vector of predictor means
simdata <- replicate(n = nsim, 
            expr = mvtnorm::rmvnorm(n = n, 
                                    mean = mu, 
                                    sigma = sigma) %>% 
              `colnames<-`(paste("V", 1:49, sep = "")) %>% # name columns
              as_tibble() %>% # make into a tibble
              mutate(y = 0.2 * V1 + 0.2 * V2 + 0.2 * V3 + 0.2 * V4 + rnorm(n)), # add outcome y
            simplify = FALSE) # keep as list of generated sets
```

# Inspect the model parameters
For the first simulated set:
```{r}
simdata[[1]] %$% # for the first simulated set in simdata
  lm(y ~ V1 + V2 + V3 + V4) %>% # fit linear model
  summary() 
```

For all simulated sets:
```{r}
simdata %>% 
  map(~.x %$% # for every simulated set in simdata....
        lm(y ~ V1 + V2 + V3 + V4) %>% # fit linear model
        coefficients) %>% # extract coefficients
  Reduce("+", .) / length(simdata) # add all and divide by length (= average)
```

# Start multisession `future`
```{r}
plan(multisession)
```

# MCAR 
We take the `r nsim` datasets in the list `simdata` and generate missing data in each of them. We will use the `mice` package's function `ampute()` to generate the missing data. 

## MCAR 10% missing
```{r MCAR10, cache=TRUE}
mbased_MCAR_10 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .1, # Amputation step
             patterns = miss.patterns, # use the patterns
             mech = "MCAR") %>% .$amp %>% 
      train_vae_and_impute(m = 5) # VAE imputation step
  }, .options = furrr_options(seed = 123))
```

### Evaluate MCAR 10% 
```{r}
# # Evaluation function
# evaluate_vae_imputation <- function(imputed_list, true_coefs) {
#   terms <- names(true_coefs)
#   results <- lapply(imputed_list, function(data) {
#     model <- lm(y ~ V1 + V2 + V3 + V4, data = data)
#     summary_model <- summary(model)
#     list(est = coef(model), var = summary_model$coefficients[, "Std. Error"]^2)
#   })
#   
#   pooled_results <- lapply(terms, function(term) {
#     ests <- sapply(results, function(x) x$est[term])
#     vars <- sapply(results, function(x) x$var[term])
#     #browser()
#     ncases <- imputed_list[[1]] %>% nrow() # number of complete data cases
#     nparam <- length(terms) # number of model parameters
#     pooled <- pool.scalar(Q = ests, U = vars, n = ncases - nparam)
#     ci_low <- pooled$qbar - qt(0.975, df = pooled$df) * sqrt(pooled$t)
#     ci_up <- pooled$qbar + qt(0.975, df = pooled$df) * sqrt(pooled$t)
#     #browser()
#     ci_width <- ci_up - ci_low
#     data.frame(
#       estimate = pooled$qbar,
#       std.error = sqrt(pooled$t),
#       bias = pooled$qbar - true_coefs[term],
#       low = ci_low,
#       up = ci_up,
#       coverage = (ci_low < true_coefs[term]) & (ci_up > true_coefs[term]),
#       ci.width = ci_width,
#       within.var = pooled$ubar,
#       between.var = pooled$b,
#       total.var = pooled$t,
#       rmse = sqrt(mean((ests - true_coefs[term])^2)),
#       row.names = term
#     )
#   })
#   return(do.call(rbind, pooled_results))
# }

evaluate_vae_imputation <- function(imputed_list, true_coefs) {
  terms <- names(true_coefs)
  results <- lapply(imputed_list, function(data) {
    model <- lm(y ~ V1 + V2 + V3 + V4, data = data)
    rmse <- sqrt(mean((predict(model) - model$model$y)^2))
    summary_model <- summary(model)
    list(est = coef(model), var = summary_model$coefficients[, "Std. Error"]^2, rmse = rmse)
  })
  
  pooled_results <- lapply(terms, function(term) {
    ests <- sapply(results, function(x) x$est[term])
    vars <- sapply(results, function(x) x$var[term])
    rmse <- sapply(results, function(x) x$rmse)
    #browser()
    ncases <- imputed_list[[1]] %>% nrow() # number of complete data cases
    nparam <- length(terms) # number of model parameters
    pooled <- pool.scalar(Q = ests, U = vars, n = ncases - nparam)
    ci_low <- pooled$qbar - qt(0.975, df = pooled$df) * sqrt(pooled$t)
    ci_up <- pooled$qbar + qt(0.975, df = pooled$df) * sqrt(pooled$t)
    #browser()
    ci_width <- ci_up - ci_low
    data.frame(
      estimate = pooled$qbar,
      std.error = sqrt(pooled$t),
      bias = pooled$qbar - true_coefs[term],
      low = ci_low,
      up = ci_up,
      coverage = (ci_low < true_coefs[term]) & (ci_up > true_coefs[term]),
      ci.width = ci_width,
      within.var = pooled$ubar,
      between.var = pooled$b,
      total.var = pooled$t,
      rmsex = sqrt(mean((ests - true_coefs[term])^2)),
      row.names = term
    )
  })
  out <- do.call(rbind, pooled_results)
  out$rmsey <- sapply(results, function(x) x$rmse)
  return(out)
}
```


```{r}
# just a single simulation evaluated, to check the function
mbased_MCAR_10[[1]] %>% 
  evaluate_vae_imputation(true_coefs = true_coefs)

VAE_MCAR10 <- mbased_MCAR_10 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        evaluate_vae_imputation(true_coefs = true_coefs)) %>% # `term` as rownames
  Reduce("+", .) / nsim
## BEWARE: ABOVE CODE puts the 5 imputed RMSE's in the rows!!!
VAE_MCAR10
```

## MCAR 25% missing
```{r MCAR25, cache=TRUE}
mbased_MCAR_25 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .25, # Amputation step
             patterns = miss.patterns, # use the patterns
             mech = "MCAR") %>% .$amp %>% 
      train_vae_and_impute(m = 5) # VAE imputation step
  }, .options = furrr_options(seed = 123))
```

### Evaluate MCAR 25% 
```{r}
VAE_MCAR25 <- mbased_MCAR_25 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        evaluate_vae_imputation(true_coefs = true_coefs)) %>% # `term` as rownames
  Reduce("+", .) / nsim
VAE_MCAR25
```

## MCAR 50% missing
```{r MCAR50, cache=TRUE}
mbased_MCAR_50 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .5, # Amputation step
             patterns = miss.patterns, # use the patterns
             mech = "MCAR") %>% .$amp %>% 
      train_vae_and_impute(m = 5) # VAE imputation step
  }, .options = furrr_options(seed = 123))
```

### Evaluate MCAR 50% 
```{r}
VAE_MCAR50 <- mbased_MCAR_50 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        evaluate_vae_imputation(true_coefs = true_coefs)) %>% # `term` as rownames
  Reduce("+", .) / nsim
VAE_MCAR50
```

# MAR 
We take the `r nsim` datasets in the list `simdata` and generate missing data in each of them. We will use the `mice` package's function `ampute()` to generate the missing data. 

## MAR 10% missing
```{r MAR10, cache=TRUE}
mbased_MAR_10 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .1, # Amputation step
             patterns = miss.patterns, # use the patterns
             mech = "MAR") %>% .$amp %>% 
      train_vae_and_impute(m = 5) # VAE imputation step
  }, .options = furrr_options(seed = 123))
```

### Evaluate MAR 10% 
```{r}
VAE_MAR10 <- mbased_MAR_10 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        evaluate_vae_imputation(true_coefs = true_coefs)) %>% # `term` as rownames
  Reduce("+", .) / nsim
VAE_MAR10
```

## MAR 25% missing
```{r MAR25, cache=TRUE}
mbased_MAR_25 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .25, # Amputation step
             patterns = miss.patterns, # use the patterns
             mech = "MAR") %>% .$amp %>% 
      train_vae_and_impute(m = 5) # VAE imputation step
  }, .options = furrr_options(seed = 123))
```

### Evaluate MAR 25% 
```{r}
VAE_MAR25 <- mbased_MAR_25 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        evaluate_vae_imputation(true_coefs = true_coefs)) %>% # `term` as rownames
  Reduce("+", .) / nsim
VAE_MAR25
```

## MAR 50% missing
```{r MAR50, cache=TRUE}
mbased_MAR_50 <- 
  simdata %>%
  furrr::future_map(function(x) {
    x %>% 
      ampute(prop = .5, # Amputation step
             patterns = miss.patterns, # use the patterns
             mech = "MAR") %>% .$amp %>% 
      train_vae_and_impute(m = 5) # VAE imputation step
  }, .options = furrr_options(seed = 123))
```

### Evaluate MAR 50% 
```{r}
VAE_MAR50 <- mbased_MAR_50 %>% 
  map(~.x %>% # for every simulated multiple imputation....
        evaluate_vae_imputation(true_coefs = true_coefs)) %>% # `term` as rownames. 
  Reduce("+", .) / nsim
VAE_MAR50
```

# Runtime
```{r}
Sys.time() - st
```

# Save results
```{r}
save(VAE_MCAR10,
     VAE_MCAR25,
     VAE_MCAR50,
     VAE_MAR10,
     VAE_MAR25,
     VAE_MAR50,
     file = "VAE_results.RData")
```

